# Реализовать классы снарядов. 
#   Конкретные типы снарядов будут наследниками класса прародитель Ammo. 
#   Наследники могут просто наследовать методы родителя, 
#   но могут и быть переопределены, то есть работать не так, 
#   как родительский метод. Но мы точно знаем, 
#   что любой снаряд должен иметь ряд методов
# 
# Класс Ammo имеет следующее поля: 
#   gun(каждый снаряд делается под конкретную пушку, 
#                         так что здесь стоит применить агрегацию), 
#   type_ammo (фугасный, кумулятивный, подкалиберный)

# Класс Ammo имеет базовые методы:
#   get_damage, любой снаряд должен наносить урон. 
#       Этот метод просто возвращает калибр пушки, умноженный на три. 
#       В общем случае, урон снаряда зависит от калибра. 
#       Но этот метод будет переопределяться в дочерних классах 
#       (помним, что снаряды, которые хорошо пробивают броню, 
#       как правило наносят меньший «заброневой» урон)

#   get_penetration
#       любой снаряд должен пробивать (или по крайней мере пытаться пробить) 
#       броню. В общем случае способность пробивать броню также зависит от 
#       калибра (ну, и еще от многого – начальной скорости, например, но мы не 
#       будем усложнять). Поэтому, метод возвращает калибр пушки. То есть, грубо
#       говоря, снаряд может пробить броню, равную по толщине своему калибру. 
#       Этот метод не будет переопределяться в дочерних классах.
#     
# 3. Реализовать конкретный класс фугасных снарядов HEСartridge 
#   (все конкретные классы снарядов наследуются от Ammo), фугасный 
#   (дефолтный урон) получаемый из метода get_damage никак не изменяется
#     
# 4. Реализовать класс HEATCartridge, кумулятивный (дефолтный урон х 0.6)
#   необходимо переопределить метод get_damage – super().get_damage() * 0.6. 
#   Урона меньше, но данного типа зарядов будет большая бронебойная способность
# 
# 5. Реализовать класс APCartridge, Подкалиберный (дефолтный урон х 0.3).
#   необходимо переопределить метод get_damage – super().get_damage() * 0.3
from Gun import Gun
class Ammo():
    """Basic class which exist info about tank's ammunition."""

    def __init__(self, gun, type_ammo) -> None:
        """Ammo has 2 attributes: Gun, Type(VOORUSHENIYA)"""
        # self.gun = Gun(76, 30)
        self.gun = gun
        self.type_ammo = type_ammo
    
    def get_damage(self):
        """BOOM"""
        return self.gun.caliber * 3
    
    def get_penetration(self):
        return self.gun.caliber


class APCartridge(Ammo):
    def get_damage(self):
        return super().get_damage() * 0.3

class HEСartridge(Ammo):
    pass

class HEATCartridge(Ammo):
    def get_damage(self):
        return super().get_damage() * 0.6


if __name__ == '__main__':
    caliber = print(Ammo(123,123).get_damage())