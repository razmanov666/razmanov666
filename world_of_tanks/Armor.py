# 1. Реализовать класс прародитель брони Armour, который будет иметь два поля 
#   thickness (толщина брони) и 
#   type_armor(тип брони). 

#   Броня будет в нашей игре определять пробита они или нет. Поэтому, 
#   у нее будет лишь один метод - is_penetrated, который будет 
#   переопределяться в дочерних классах, в зависимости от типа брони.

#   is_penetrated как аргумент принимает объект снаряда, который попал в нее и 
#   возвращает bool значение (пробита броня или нет) по условию: 
#   {пробивная способность снаряда} > { толщина брони}

# 2. Реализовать конкретный класс брони HArmour (гомогенная) и переопределить в 
#   нем метод is_penetrated , который будет вычислять пробита ли броня в 
#   зависимости от типа снаряда
#     a. Фугасный снаряд: {пробивная способность снаряда} > { толщина брони}*1.2
#     b. Кумулятивный: {пробивная способность снаряда} > { толщина брони}*1
#     c. Подкалиберный: {пробивная способность снаряда} > { толщина брони}*0.7
# 3. Реализовать конкретный класс брони SArmour(Стальная)
# 4. Реализовать крнкретный класс брони CArmour(Керамическая)

# Теперь у нас все готово для создания танка. В танке не будет наследования, 
#   но будет композиция и агрегация. Разумеется, у танка будет название. 
#   У танка будет пушка (агрегация). Для нашей игры сделаем допущение, что танк 
#   может «переодевать» броню перед каждым ходом – выбрать тот или иной тип 
#   брони. Для этого, у танка будет список типов брони. У танка будет боеукладка
#   – список снарядов, который будет наполнен снарядами, созданными в 
#   конструкторе танка (композиция!). У танка будет здоровье (уменьшается при 
#   попадании в него), и, у танка будет текущая выбранная броня и текущий 
#   выбранный снаряд.


class Armor():
    
    def __init__(self, thickness, type_armor = ''):
        self.thickness = thickness
        self.type_armor = type_armor
    
    def is_penetrated() -> bool:
        print(123)

class HArmor(Armor):
    def __init__(self, thickness):
        super().__init__(thickness, 'Гомогенная')

class CArmor(Armor):
    def __init__(self, thickness):
        super().__init__(thickness, 'Керамическая')

class SArmor(Armor):
    def __init__(self, thickness):
        super().__init__(thickness, 'Стальная')
        
if __name__ == '__main__':
    arm = print(HArmor(20).type_armor)